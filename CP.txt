//Освобождение соединения
public synchronized void freeConnection(Connection con) { 

	if ( (con != null) && (freeConnections.size!) <= maxConn) ) { 
		freeConnections.add(con); 
	} 

}

//Удаление всех соединений
public synchronized void released { 
	Iterator allConnections = freeConnections.iterator(); 

	while (allConnections. hasNext()) { 
		Connection con = (Connection) allConnections.next(); 

		try { 
			con. closed; 
			log("Closed connection for pool"); 
		} catch (SQLException e) { 
			log("Can't close connection for pool"); 
		} 

	} 

	freeConnections.clear(); 
}

//Создание нового соединения
private Connection newConnection() { 

	Connection con = null; 
	
	try { 
		if (user == null) { 
			con = DriverManager.getConnection(URL); 
		} else { 
			con = DriverManager.getConnection(URL, user, password); 
		} 

		log("Created a new connection in pool"); 
	} catch (SQLException e) { 
		log("Can't create a new connection for " + URL); 
		return null; 
	} 

	return con; 
}

//Получение соединения
public synchronized Connection getConnection() { 

	Connection con = null; 
	
	if (!freeConnections.isEmpty()) { 
		con = (Connection) freeConnections.get(freeConnections.size()-1); 
		freeConnections.remove(con); 

		try { 
			if (con.isClosed()) { 
				log("Removed bad connection "); 
				// Try again recursively 
				con = getConnection(); 
			} 
		} catch (SQLException e) { 
			log ("Removed bad connection "); 
			// Try again recursively 
			con = getConnection(); 
		} catch (Exception e) { 
			log ("Removed bad connection "); 
			// Try again recursively 
			con = getConnection(); 
		} 

	} else { 
		con = newConnection(); 
	} 

	return con; 
}

//Конструктор класса DBConnectionPool
private DBConnectionPool (String URL, String user, String password, int maxConn) { 
	this.URL = URL; 
	this.user = user; 
	this.password = password; 
	this.maxConn = maxConn; 
	String logFile = "DBConnection.log"; 

	try { 
		log = new PrintWriter(new FileWriter(logFile, true), true); 
	} catch (IOException e) { 
		System, err. print In ("Can't open the log file: " + logFile); 
		log = new PrintWriter(System.err); 
	} 

	loadDrivers(); 
}

//Реализация Синглтона получаем единственный статический объект DBConnectionPool
public static synchronized DBConnectionPool getlnstance (String URL, String user, String password, int maxConn) { 

	if (instance == null) { 
		instance = new DBConnectionPool(URL, user, password, maxConn); 
	} 

	return instance; 
}

//Загружаем драйвер JDBC
private void loadDrivers() { 

	try { 
		Driver driver = (Driver)Class.forName (DRIVER_NAME).newlnstance()); 
		DriverManager.registerDriver (driver); 
		log("Registered JDBC driver "); 
	} catch (Exception e) { 
		log("Can't register JDBC driver"); 
	} 

}