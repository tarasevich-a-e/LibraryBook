<?xml version="1.0" encoding="UTF-8"?>
<project name="library" default="Start">

    <property name="tomcat" value="C:/Program Files/Apache Software Foundation/apache-tomcat-8.5.4"/>
    <property name="mysql.dir" value="D:/WORK/App/MySQLSRV"/>
    <property name="brawser" value="C:/Program Files/Google/Chrome/Application/chrome.exe"/>
    <property name="dir.log" value="./logs"/>

    <property name="project.name" value="Library"/>
    <property name="dir.webinf" value="web/WEB-INF"/>
    <property name="dir.lib" value="./lib"/>
    <property name="dir.src" value="./src"/>
    <property name="dir.target" value="./target"/>
    <property name="build.dir" value="./web"/>

    <property name="host" value="http://localhost"/>
    <property name="port" value="8080"/>

    <path id="common_library">
        <pathelement location="lib/javax.servlet.jar"/>
        <pathelement location="lib/gson-2.2.2.jar"/>
        <pathelement location="lib/mysql-connector-java-5.1.39-bin.jar"/>
        <pathelement location="lib/log4j-1.2.15.jar"/>
    </path>
    <!--Для тестов-->
    <path id="test_library">
        <pathelement location="lib/log4j-1.2.15.jar"/>
        <pathelement location="lib/junit-4.12.jar"/>
        <pathelement location="lib/hamcrest-core-1.3.jar"/>
    </path>
    <!--Для TOMCAT-->
    <path id="tomcat_library">
        <pathelement location="${tomcat}/bin/bootstrap.jar"/>
        <pathelement location="${tomcat}/bin/tomcat-juli.jar"/>
    </path>

    <target name="1. Clear and create directory">
        <!--Чистим папку target (JAR and WAR)-->
        <delete dir="${dir.target}"/>
        <!--Чистим WEB-INF-->
        <delete dir="${dir.webinf}/classes"/>
        <delete dir="${dir.webinf}/test"/>
        <delete dir="${dir.webinf}/lib"/>
        <delete dir="${dir.webinf}/resource"/>
        <!--Чистим папки Tomcat-->
        <delete dir="${tomcat}/webapps/${project.name}"/>
        <delete dir="${tomcat}/webapps/ROOT"/>
        <delete file="${tomcat}/webapps/${project.name}.war"/>
        <!--Чистим логи-->
        <delete dir="${dir.log}"/>
        <delete dir="${tomcat}/logs"/>

        <!--Создаем папку target для хранения JAR и WAR файлов-->
        <mkdir dir="${dir.target}"/>
        <!--Создаем папки в "web/WEB-INF/"-->
        <mkdir dir="${dir.webinf}/classes"/>
        <mkdir dir="${dir.webinf}/resource"/>
        <mkdir dir="${dir.webinf}/test"/>
        <mkdir dir="${dir.webinf}/lib"/>
        <!--Восстанавливаем "ROOT" в Tomcat'e-->
        <mkdir dir="${tomcat}/webapps/ROOT"/>
        <!--Восстанавливаем папку "test_logs"-->
        <mkdir dir="${dir.log}"/>
    </target>

    <target name="2. Compile project" depends="1. Clear and create directory">
        <!--Для нового проекта изменить структуру и добавить в настройки по дефолту srcdir-->
        <javac srcdir="src/ru" destdir="${dir.webinf}/classes" failonerror="true" fork="true" encoding="UTF-8" debug="on">
        <!--failonerror=true - если при компиляции какого-либо из файлов произойдет ошибка, ни одного файла classes не появится-->
        <!--fork=true - используется отдельная виртуальная машина-->
            <classpath refid="common_library"/>
        </javac>
        <!--Собираем из скомпилированных файлов JAR файл-->
        <jar destfile="${dir.target}/${project.name}.jar">
            <fileset dir="${dir.webinf}/classes">
                <include name="**/*.class"/>
            </fileset>
        </jar>
        <!--Копируем библиотеки и файлы ресурсов в папку собираемого проекта-->
        <copy todir="${dir.webinf}/lib">
            <fileset dir="${dir.lib}/">
                <include name="*.*"/>
            </fileset>
        </copy>
        <!--Настройки логера ложим в папку ресурсов-->
        <copy todir="${dir.webinf}/resource">
            <fileset dir="${dir.src}/resource/">
                <include name="*.*"/>
            </fileset>
        </copy>
    </target>

    <target name="3. Create WAR" depends="2. Compile project">
        <war
                compress = "true"
                encoding = "utf-8"
                warfile = "${dir.target}/${project.name}.war"
                webxml="${dir.webinf}/web.xml">
            <fileset dir="${build.dir}" excludes="WEB-INF/web.xml"/>
        </war>
    </target>

    <target name="4. Copy to ROOT" depends="3. Create WAR">
        <!--Put in to ROOT-->
        <copy todir="${tomcat}/webapps/ROOT">
            <fileset dir="${build.dir}"/>
        </copy>

    </target>

    <!--Для работы с MySQL-->
    <target name="5.1. MySQL.start">
        <exec executable="cmd" dir="${mysql.dir}" spawn="true">
            <arg value="/c"/>
            <arg value="_start MYSQL.cmd"/>
        </exec>
        <!--spawn=”true” (выполнение задачи в отдельном потоке)-->
    </target>

    <target name="5.2. MySQL.stop">
        <exec executable="cmd" dir="${mysql.dir}" spawn="true">
            <arg value="/c"/>
            <arg value="_shutdown MYSQL.cmd"/>
        </exec>
        <!--spawn=”true” (выполнение задачи в отдельном потоке)-->
    </target>

    <target name="6. DEBUG" depends="4. Copy to ROOT, 5.1. MySQL.start">
        <exec executable="cmd" dir="${tomcat}/bin">
            <arg value="/c"/>
            <arg value="catalina.bat jpda start"/>
        </exec>
    </target>

    <target name="7.1. Start browser(ROOT)">
        <exec executable="cmd" dir="${tomcat}/bin">
            <arg value="/c"/>
            <arg value="${brawser}"/>
            <arg value="${host}:${port}/"/>
        </exec>
    </target>

    <target name="Start" depends="4. Copy to ROOT, 5.1. MySQL.start, 7.1. Start browser(ROOT)" description="Start TOMCAT">
        <!--
        Рабочий вариант
        <exec executable="cmd" dir="${tomcat}/bin">
            <arg value="/c"/>
            <arg value="catalina.bat start"/>
            <arg value="-Dlog4j.configuration=${basedir}\web\WEB-INF\resource\log4j.properties"/>
        </exec>-->
        <echo message="Application path: ${tomcat}/webapps/ROOT"/>
        <java classname="org.apache.catalina.startup.Bootstrap" fork="true" classpathref="tomcat_library" dir="${tomcat}/webapps/ROOT">
            <jvmarg value="-Dcatalina.home=${tomcat}"/>
            <jvmarg value="-Dlog4j.configuration=file:${basedir}\web\WEB-INF\resource\log4j.properties"/>

        </java>
    </target>

    <target name="Stop" depends="5.2. MySQL.stop, tomcat-check-status" if="tomcat.started" description="Stop TOMCAT">
        <!--
        Рабочий вариант
        <exec executable="cmd" dir="${tomcat}/bin">
            <arg value="/c"/>
            <arg value="catalina.bat stop"/>
        </exec>-->
        <java classname="org.apache.catalina.startup.Bootstrap" fork="true" classpathref="tomcat_library" dir="${tomcat}/webapps/ROOT">
            <jvmarg value="-Dcatalina.home=${tomcat}"/>
            <arg line="stop"/>
        </java>
    </target>

    <!--Если TOMCAT запущен то устанавливает свойство tomcat.started, тогда возможно выполнение остановки TOMCAT'a-->
    <target name="tomcat-check-status">
        <echo message="tomcat-check-status"/>
        <condition property="tomcat.started">
            <socket server="localhost" port="8080"/>
        </condition>
    </target>

    <target name="_Compile TEST" depends="2. Compile project">
        <javac srcdir="src/test" destdir="${dir.webinf}/test" failonerror="true" fork="true" encoding="UTF-8" debug="on">
            <classpath>
                <!--Добавляем к тестам скомпилированные исходники программы-->
                <pathelement location="${dir.target}/${project.name}.jar"/>
                <!--Добавляем к тестам библиотеки необходимые для работы тестов-->
                <path refid="test_library"/>
            </classpath>
        </javac>
    </target>

    <target name="__ALL TEST" depends="_Compile TEST, 5.1. MySQL.start">
        <!--
           Атрибуты junit
               printsummary="yes" - в конце прогона будет выдана сумма пройденных и не пройденных тестов
               haltonerror="yes" - остановить процесс сборки при возникновении ошибки ( unexpected exception)
               haltonfailure="yes" - остановить процесс сборки, если условие assert вернуло false
               fork="yes" - запуск на отдельной JVM
           -->
        <echo message="Application path: ${basedir}"/>
        <junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="yes">
            <!--Тег formatter задает параметры отображения результатов тестирования. Параметр type="plain" указывает,
           что результаты тестирования должны отображаться в виде обычного текста, а параметр usefile="false"
           обеспечивает вывод результатов на экран, а не в файл.-->
            <!--<sysproperty  key="log4j.configuration" value="${basedir}\web\WEB-INF\resource\log4j.properties"/>-->


            <formatter type="plain" usefile="false"/>
            <classpath>
                <!--Добавляем к тестам скомпилированные исходники программы-->
                <pathelement location="${dir.target}/${project.name}.jar"/>
                <!--<pathelement location="${dir.webinf}/classes"/>-->
                <!--Добавляем сами скомпилированные тесты-->
                <pathelement location="${dir.webinf}/test"/>
                <!--Добавляем к тестам библиотеки необходимые для работы тестов-->
                <path refid="test_library"/>
                <pathelement location="lib/mysql-connector-java-5.1.39-bin.jar"/>
            </classpath>
            <!--Запуск теста по имени исходника-->
            <test name="ru.library.ListenerTest"/>
            <test name="ru.library.DBConnectionPoolTest"/>
            <jvmarg value="-Dlog4j.configuration=file:${basedir}\web\WEB-INF\resource\log4j.properties"/>
        </junit>

        <!--Так как для запуска некоторых тестов требется запуск MySQL, здесь тормозим его-->
        <exec executable="cmd" dir="${mysql.dir}" spawn="true">
            <arg value="/c"/>
            <arg value="_shutdown MYSQL.cmd"/>
        </exec>
    </target>

</project>